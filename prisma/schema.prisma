// Prisma schema for AI Governance Navigator
// Stage 0 MVP: AI Intake, EU AI Act Policy Pack, RBAC & SSO

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ RBAC & User Management ============

model Tenant {
  id                String    @id @default(cuid())
  name              String
  domain            String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  encryptionKeyId   String?
  subscriptionTier  String    @default("TRIAL")
  
  users             User[]
  aiSystems         AISystem[]
  policies          Policy[]
  auditLogs         AuditLog[]
  settings          TenantSettings?
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  avatarUrl         String?
  ssoProviderId     String?
  externalId        String?   // SSO provider user ID
  
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  
  roles             UserRole[]
  createdSystems    AISystem[] @relation("SystemCreator")
  ownedSystems      AISystem[] @relation("SystemOwner")
  reviews           Review[]
  auditLogs         AuditLog[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?
  
  @@index([tenantId])
  @@index([email])
}

model Role {
  id                String    @id @default(cuid())
  name              String
  description       String?
  permissions       Json      // Array of permission strings
  isSystem          Boolean   @default(false)
  
  users             UserRole[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@unique([name])
}

model UserRole {
  id                String    @id @default(cuid())
  userId            String
  roleId            String
  
  user              User      @relation(fields: [userId], references: [id])
  role              Role      @relation(fields: [roleId], references: [id])
  
  assignedAt        DateTime  @default(now())
  assignedBy        String?
  expiresAt         DateTime?
  
  @@unique([userId, roleId])
  @@index([userId])
}

// ============ AI System Registry ============

model AISystem {
  id                String    @id @default(cuid())
  intakeId          String?   @unique
  name              String
  description       String
  purpose           String
  
  // EU AI Act specific fields
  actorRole         ActorRole
  dataResidency     String
  controllerStatus  ControllerStatus
  gpaiFlag          Boolean   @default(false)
  euDbRegistrationId String?
  
  // Classification
  riskLevel         RiskLevel?
  status            SystemStatus @default(DRAFT)
  
  // Metadata
  modelType         String
  deploymentContext String
  department        String
  expectedGoLive    DateTime?
  
  // Relationships
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  
  creatorId         String
  creator           User      @relation("SystemCreator", fields: [creatorId], references: [id])
  
  ownerId           String
  owner             User      @relation("SystemOwner", fields: [ownerId], references: [id])
  
  // Related data
  riskAssessments   RiskAssessment[]
  documents         Document[]
  reviews           Review[]
  complianceChecks  ComplianceCheck[]
  euRegistration    EUDatabaseRegistration?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([tenantId])
  @@index([status])
  @@index([riskLevel])
}

model RiskAssessment {
  id                String    @id @default(cuid())
  systemId          String
  system            AISystem  @relation(fields: [systemId], references: [id])
  
  classification    RiskLevel
  rationale         String
  confidence        Float
  euActArticles     String[]
  annexCategories   String[]
  
  previousClassification RiskLevel?
  classificationDiff     Json?
  
  overrideReason    String?
  overriddenBy      String?
  
  assessedAt        DateTime  @default(now())
  assessedBy        String    @default("SYSTEM")
  
  @@index([systemId])
}

model Document {
  id                String    @id @default(cuid())
  systemId          String
  system            AISystem  @relation(fields: [systemId], references: [id])
  
  type              DocumentType
  name              String
  fileUrl           String
  version           String
  
  requiredForApproval Boolean @default(false)
  status            DocumentStatus @default(DRAFT)
  
  uploadedBy        String
  uploadedAt        DateTime  @default(now())
  approvedBy        String?
  approvedAt        DateTime?
  
  @@index([systemId])
  @@index([type])
}

model EUDatabaseRegistration {
  id                String    @id @default(cuid())
  systemId          String    @unique
  system            AISystem  @relation(fields: [systemId], references: [id])
  
  registrationStatus RegistrationStatus @default(DRAFT)
  submissionDate    DateTime?
  registrationId    String?
  
  ownerContact      String
  intendedPurpose   String
  conformityModule  String?
  notifiedBodyId    String?
  technicalFileLink String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([registrationStatus])
}

// ============ Policy & Compliance ============

model Policy {
  id                String    @id @default(cuid())
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  
  name              String
  category          PolicyCategory
  euActArticle      String?
  description       String
  content           Json      // Rich text content
  
  version           String    @default("1.0")
  isActive          Boolean   @default(true)
  isTemplate        Boolean   @default(false)
  
  controls          Control[]
  complianceChecks  ComplianceCheck[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  publishedAt       DateTime?
  
  @@index([tenantId])
  @@index([category])
  @@unique([tenantId, name, version])
}

model Control {
  id                String    @id @default(cuid())
  policyId          String
  policy            Policy    @relation(fields: [policyId], references: [id])
  
  code              String    @unique
  name              String
  description       String
  category          String
  
  implementationGuide String
  evidenceRequirements String[]
  automationAvailable Boolean @default(false)
  
  complianceChecks  ComplianceCheck[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([policyId])
}

model ComplianceCheck {
  id                String    @id @default(cuid())
  systemId          String
  system            AISystem  @relation(fields: [systemId], references: [id])
  
  policyId          String
  policy            Policy    @relation(fields: [policyId], references: [id])
  
  controlId         String?
  control           Control?  @relation(fields: [controlId], references: [id])
  
  status            ComplianceStatus
  evidence          Json?
  findings          String?
  
  checkedAt         DateTime  @default(now())
  checkedBy         String
  
  @@index([systemId])
  @@index([policyId])
  @@unique([systemId, policyId, controlId])
}

// ============ Review & Approval ============

model Review {
  id                String    @id @default(cuid())
  systemId          String
  system            AISystem  @relation(fields: [systemId], references: [id])
  
  reviewerId        String
  reviewer          User      @relation(fields: [reviewerId], references: [id])
  
  type              ReviewType
  status            ReviewStatus @default(PENDING)
  comments          String?
  
  requestedAt       DateTime  @default(now())
  completedAt       DateTime?
  dueDate           DateTime?
  
  @@index([systemId])
  @@index([reviewerId])
  @@unique([systemId, reviewerId, type])
}

// ============ Audit & Security ============

model AuditLog {
  id                String    @id @default(cuid())
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
  
  action            String
  resourceType      String
  resourceId        String
  
  details           Json
  ipAddress         String?
  userAgent         String?
  
  // For immutability
  previousHash      String?
  currentHash       String
  
  timestamp         DateTime  @default(now())
  
  @@index([tenantId])
  @@index([userId])
  @@index([resourceType, resourceId])
  @@index([timestamp])
}

model TenantSettings {
  id                String    @id @default(cuid())
  tenantId          String    @unique
  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  
  // SoD Rules
  sodRules          Json      @default("{\"creator_cannot_approve\": true, \"admin_cannot_self_approve\": true, \"dual_approval_for_high_risk\": true}")
  
  // PII Controls
  piiMaskingRules   Json      @default("{\"mask_emails\": true, \"mask_names\": true, \"mask_ssn\": true}")
  
  // Integration settings
  ssoConfig         Json?
  notificationConfig Json?
  
  updatedAt         DateTime  @updatedAt
}

// ============ ENUMS ============

enum ActorRole {
  PROVIDER
  DEPLOYER
  IMPORTER
}

enum ControllerStatus {
  CONTROLLER
  PROCESSOR
  JOINT_CONTROLLER
}

enum RiskLevel {
  PROHIBITED
  HIGH_RISK
  LIMITED_RISK
  MINIMAL_RISK
}

enum SystemStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  IN_PRODUCTION
  RETIRED
}

enum DocumentType {
  TECHNICAL_DOCUMENTATION
  USER_MANUAL
  RISK_ASSESSMENT
  CONFORMITY_DECLARATION
  TRAINING_DATA_SUMMARY
  IP_CLEARANCE
  TEST_RESULTS
  AUDIT_REPORT
  OTHER
}

enum DocumentStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum RegistrationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}

enum PolicyCategory {
  PROHIBITED_AI
  HIGH_RISK_AI
  GPAI_MODEL
  DATA_GOVERNANCE
  TRANSPARENCY
  HUMAN_OVERSIGHT
  CYBERSECURITY
}

enum ComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  PARTIAL
  NOT_APPLICABLE
  PENDING_REVIEW
}

enum ReviewType {
  LEGAL
  TECHNICAL
  ETHICS
  RISK
  COMPLIANCE
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  CONDITIONAL
}